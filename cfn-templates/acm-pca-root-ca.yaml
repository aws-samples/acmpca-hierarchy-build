---
AWSTemplateFormatVersion: "2010-09-09"
Description: Private Root Certificate Authority (CA) creation template
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

Parameters:
  CaValidityValue:
    Description: Private Root CA validity value; default is 10
    Type: Number
    Default: 10

  CaValidityType:
    Description: Private Root CA validity time unit; default is YEARS
    Type: String
    AllowedValues: [ "YEARS", "MONTHS", "DAYS" ]
    Default: "YEARS"

  CaCommonName:
    Description: Common Name (CN) of the private Root CA, e.g., Example Ltd Root CA v1
    Type: String

  CaSubjectCountry:
    Description: Country in the private Root CA Certificate Subject, e.g., AU
    Type: String

  CaSubjectLocality:
    Description: Locality in the private Root CA Certificate Subject, e.g., Sydney
    Type: String

  CaSubjectState:
    Description: State in the private Root CA Certificate Subject, e.g., New South Wales
    Type: String

  CaSubjectOrganization:
    Description: Organization in the private Root CA Certificate Subject, e.g., Example Ltd
    Type: String

  CaSubjectOrganizationalUnit:
    Description: Organizational Unit (OU) in the private Root CA Certificate Subject, e.g., Enterprise Cloud
    Type: String

  CaKeyAlgorithm:
    Description: Key Algorithm of the key pair the private Root CA creates when issuing a certificate; default is RSA_4096
    Type: String
    AllowedValues: [ "RSA_2048", "RSA_4096", "EC_prime256v1", "EC_secp384r1" ]
    Default: "RSA_4096"

  CaSigningAlgorithm:
    Description: Signing Algorithm the private Root CA uses to sign certificate requests; default is SHA512WITHRSA
    Type: String
    AllowedValues: [ "SHA256WITHECDSA", "SHA384WITHECDSA", "SHA512WITHECDSA", "SHA256WITHRSA", "SHA384WITHRSA", "SHA512WITHRSA" ]
    Default: "SHA512WITHRSA"

  CaChainS3BucketName:
    Description: >
      S3 Bucket to be created for CloudFormation to hold the CA Chain and Template snippet;
    Type: String
    AllowedPattern: >-
      ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$

  CrlExpirationInDays:
    Description: CRL Expiration in Days, e.g., 2
    Type: Number
    Default: 2

  CrlCname:
    Description: >
      CRL Canonical Name (Cname), e.g., crl.pca.example.int
      (a globally unique name even privately hosted, as the CRL hosting S3 bucket needs to have a globally unique name)
    Type: String
    AllowedPattern: >-
      ^[a-z0-9][a-z0-9-\.]{2,62}$
# Needs to align with S3 bucket naming pattern instead of the FQDN one: "^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$"

  CrlPrivateZoneId:
    Description: CRL Private Zone ID, i.e., the Zone ID of the Private Zone where CrlCname is hosted.
    Type: AWS::Route53::HostedZone::Id

Resources:
  ############################################################
  #
  # Root CA
  #
  RootCa:
    Type: AWS::ACMPCA::CertificateAuthority
    DependsOn: CrlS3BucketPolicy
    Properties:
      Type: "ROOT"
      Subject:
        CommonName: !Ref CaCommonName
        Country: !Ref CaSubjectCountry
        Locality: !Ref CaSubjectLocality
        Organization: !Ref CaSubjectOrganization
        OrganizationalUnit: !Ref CaSubjectOrganizationalUnit
        State: !Ref CaSubjectState
      RevocationConfiguration:
        CrlConfiguration:
          CustomCname: !Ref CaCrlCname
          Enabled: true
          ExpirationInDays: !Ref CrlExpirationInDays
          S3BucketName: !Ref CrlS3Bucket
      KeyAlgorithm: !Ref CaKeyAlgorithm
      SigningAlgorithm: !Ref CaSigningAlgorithm
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  RootCaCert:
    Type: AWS::ACMPCA::Certificate
    Properties:
      TemplateArn: arn:aws:acm-pca:::template/RootCACertificate/V1
      CertificateAuthorityArn: !GetAtt RootCa.Arn
      CertificateSigningRequest: !GetAtt RootCa.CertificateSigningRequest
      SigningAlgorithm: !Ref CaSigningAlgorithm
      Validity:
        Type: !Ref CaValidityType
        Value: !Ref CaValidityValue

  RootCaCertActivation:
    Type: AWS::ACMPCA::CertificateAuthorityActivation
    Properties:
      Certificate: !GetAtt RootCaCert.Certificate
      CertificateAuthorityArn: !GetAtt RootCa.Arn

  ############################################################
  #
  # CRL Related Resources (Common code for Subordinate CA creation)
  #
  CrlS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CrlS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: acm-pca.amazonaws.com
            Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectAcl
            Resource:
              - !Sub "arn:aws:s3:::${CrlS3Bucket}"
              - !Sub "arn:aws:s3:::${CrlS3Bucket}/*"
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: s3:*
            Resource:
              - !Sub "arn:aws:s3:::${CrlS3Bucket}/*"
              - !Sub "arn:aws:s3:::${CrlS3Bucket}"

  CrlS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref CrlCname
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      WebsiteConfiguration:
        IndexDocument: index.crl # Dummy value
    DeletionPolicy: Retain

  CaCrlCname:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref CrlPrivateZoneId
      Name: !Ref CrlCname
      ResourceRecords:
        - !Sub "${CrlCname}.s3-website-${AWS::Region}.amazonaws.com"
      TTL: 900
      Type: CNAME

  ############################################################
  #
  # CA Chain Related Resources (Pre-requisites for Subordinate CA creation)
  #
  CaChainS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref CaChainS3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    DeletionPolicy: Retain

  CaChainS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CaChainS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: s3:*
            Resource:
              - !Sub "arn:aws:s3:::${CaChainS3Bucket}/*"
              - !Sub "arn:aws:s3:::${CaChainS3Bucket}"

  CaChainLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to return the CA Chain
      Code:
        ZipFile:
          !Sub |
            import boto3
            import sys
            import os
            import re
            import json
            import cfnresponse

            def handler(event, context):
              print(json.dumps(event))
              if 'RequestType' in event and event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

              try:
                caArn = event['ResourceProperties']['CaArn']
                caId = re.sub(r"^.*/", "", caArn)

                client = boto3.client('acm-pca')
                caCertJson = client.get_certificate_authority_certificate(
                    CertificateAuthorityArn=caArn
                )
                print(json.dumps(caCertJson))
                caCert = ''
                caChain = ''
                if 'Certificate' in caCertJson:
                  caCert = caCertJson['Certificate'] + '\n'
                if 'CertificateChain' in caCertJson:
                  caChain = caCertJson['CertificateChain'] + '\n'
                caCertChain = caCert + caChain
                objPrefix = 'pca/' + caId

                s3 = boto3.client('s3')
                s3.put_object(
                  Bucket=os.environ['CaChainS3Bucket'],
                  Body=caCertChain,
                  Key=objPrefix + '-chain.pem',
                )
                s3.put_object(
                  Bucket=os.environ['CaChainS3Bucket'],
                  Body='CertificateChain: |\n  ' + caCertChain.strip().replace('\n', '\n  ') + '\n',
                  Key=objPrefix + '-cfn.yaml',
                )

                # 4k limit in response
                responseData = {
                  'ObjectPrefix': objPrefix
                }
                print(json.dumps(responseData))
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

              except:
                print(f"Unexpected error: {sys.exc_info()}")
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

              return None
      Handler: index.handler
      Environment:
        Variables:
          CaChainS3Bucket: !Ref CaChainS3Bucket
      Runtime: python3.8
      Timeout: 30
      Role: !GetAtt CaChainLambdaExecutionRole.Arn

  CaChainLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: lambda-logging
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: acm-pca
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - acm-pca:GetCertificateAuthorityCertificate
            Resource: !Sub "arn:aws:acm-pca:*:${AWS::AccountId}:certificate-authority/*"
      - PolicyName: s3-putobj
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${CaChainS3Bucket}/pca/*"

  CaChainLambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    DependsOn: RootCaCertActivation
    Properties:
      ServiceToken: !GetAtt CaChainLambda.Arn
      FunctionName: index.handler
      CaArn: !GetAtt RootCa.Arn

Outputs:
  RootCaArn:
    Value: !GetAtt RootCa.Arn

  RootCaCertCert:
    Value: !GetAtt RootCaCert.Certificate

  CrlS3BucketRef:
    Value: !Ref CrlS3Bucket

  CaCrlCnameRef:
    Value: !Ref CaCrlCname

  CaChainS3BucketRef:
    Value: !Ref CaChainS3Bucket
    Export:
      Name: "CaChainS3Bucket"

  CaChainLambdaArn:
    Value: !GetAtt CaChainLambda.Arn
    Export:
      Name: "CaChainLambdaArn"
